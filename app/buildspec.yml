#https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html 
#buildspec for codebuild
#env variables defined in codepipeline build stage
version: 0.2
run-as: root

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
      - pip install jq
      # - echo running unit test
      # - docker run -w /app -v ${PWD}:/app python:3.7 pip3 install -r requirements.txt ; python3 -m unittest test_app.py # run unit test
  build:
    commands:
      - echo Build started on `date`
      - ls -altr
      - pwd
      - cd app/
      - echo Building the Docker image...
      - docker build -t $IMAGE_REPO_NAME:$CODEBUILD_RESOLVED_SOURCE_VERSION .
      - docker tag $IMAGE_REPO_NAME:$CODEBUILD_RESOLVED_SOURCE_VERSION $IMAGE_REPO_NAME:$IMAGE_TAG

  post_build:
    commands:
      - echo Build completed on `date`
      - export ECR_APP_NAME=$(aws ecr describe-repositories | jq -r .repositories[].repositoryName)
      - echo "ECR repository for the app - ${ECR_APP_NAME}"
      - echo Pushing the Docker image...
      - docker push $IMAGE_REPO_NAME:$CODEBUILD_RESOLVED_SOURCE_VERSION
      - aws ecr batch-delete-image --repository-name $ECR_APP_NAME --image-ids imageTag=latest
      - docker push $IMAGE_REPO_NAME:$IMAGE_TAG
      - echo Writing image definitions file...
      - cd ../
      - printf '[{"name":"%s","imageUri":"%s"}]' $CONTAINER_NAME $IMAGE_REPO_NAME:$IMAGE_TAG > imagedefinitions.json
artifacts:
  files: imagedefinitions.json
  #Amazon ECS standard deployments require an imagedefinitions.json file as an input to the deploy action.
  #https://docs.aws.amazon.com/codepipeline/latest/userguide/file-reference.html